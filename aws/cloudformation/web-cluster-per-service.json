{
  "Parameters": {
    "ServiceName": {
      "Type": "String",
      "Description": "the name of the service, e.g. item, store, etc"
    },
    "ServiceSecret": {
      "Type": "String",
      "Description": "Secret for inter-service authentication"
    },

    "IndexUserId": {
      "Type": "String",
      "Description": "whether to add a 'userId' to the table keyschema",
      "AllowedValues": ["Yes", "No"]
    },
    "ReadCapacityUnits": {
      "Type": "String",
      "Description": "table capacity - read"
    },
    "WriteCapacityUnits": {
      "Type": "String",
      "Description": "table capacity - write"
    },

    "LambdaS3Key": {
      "Type": "String",
      "Description": "something about the lambda code - maybe a zip ref?"
    },
    "LambdaTimeout": {
      "Type": "String"
    },
    "LambdaHandler": {
      "Type": "String",
      "Description": "Handler for the lambda, e.g. 'server/lambda.handler', 'lib/bundle-min.handler'"
    },

    "WithTable": {
      "Type": "String",
      "Description": "Boolean describing whether a table should be created",
      "AllowedValues": ["Yes", "No"]
    },
    "UserSecret": {
      "Type": "String",
      "Description": "The user secret (or empty) for this service"
    },
    "StripeKeyLive": {
      "Type": "String",
      "Description": "Stripe live secret"
    },
    "StripeKeyTest": {
      "Type": "String",
      "Description": "Stripe test secret"
    },
    "WithApiGateway": {
      "Type": "String",
      "Description": "Boolean describing whether the lambda is exposed on ApiGateway",
      "AllowedValues": ["Yes", "No"]
    },
    "HSPrefix": {
      "Type": "String",
      "Description": "Prefix for all shared names, e.g. \"honesty-store\", \"hs\""
    },
    "HSDomainName": {
      "Type": "String",
      "Description": "The domain name under which this deployment should be deployed"
    },
    "ServicePrefix": {
      "Type": "String",
      "Description": "Prefix for all service-based names, e.g. \"honesty-store\", \"hs-<branch>\""
    },
    "IsLive": {
      "Type": "String"
    }
  },

  "Outputs": {
    "Lambda": {
      "Value": {
        "Fn::GetAtt": [ "Lambda", "Arn" ]
      },
      "Export": {
        "Name": {
          "Fn::Join": [
            "",
            [
              "Lambda-Arn-",
              { "Ref": "ServiceName" }
            ]
          ]
        }
      }
    }
  },

  "Conditions": {
    "WithApiGateway": {
      "Fn::Equals": [ { "Ref": "WithApiGateway" }, "Yes" ]
    },
    "IndexUserId": {
      "Fn::Equals": [ {"Ref": "IndexUserId"}, "Yes" ]
    },
    "WithTable": {
      "Fn::Equals": [ {"Ref": "WithTable"}, "Yes" ]
    },
    "IsLive": {
      "Fn::Equals": [ {"Ref": "IsLive"}, "Yes" ]
    }
  },

  "Resources": {
    "Table": {
      "Condition": "WithTable",
      "Type": "AWS::DynamoDB::Table",
      "DeletionPolicy": {
        "Fn::If": [
          "IsLive",
          "Retain",
          "Delete"
        ]
      },
      "Properties": {
        "TableName": {
          "Fn::Join": [
            "",
            [
              { "Ref": "ServicePrefix" },
              "-",
              { "Ref": "ServiceName" }
            ]
          ]
        },
        "KeySchema": [ { "AttributeName": "id", "KeyType": "HASH" } ],
        "AttributeDefinitions": [
          { "AttributeName": "id", "AttributeType": "S" },
          {
            "Fn::If": [
              "IndexUserId",
              {
                "AttributeName": "userId",
                "AttributeType": "S"
              },
              { "Ref": "AWS::NoValue" }
            ]
          }
        ],
        "ProvisionedThroughput": {
          "ReadCapacityUnits": {
            "Ref": "ReadCapacityUnits"
          },
          "WriteCapacityUnits": {
            "Ref": "WriteCapacityUnits"
          }
        },
        "GlobalSecondaryIndexes": [{
          "Fn::If": [
            "IndexUserId",
            {
              "IndexName": "userId",
              "KeySchema": [{
                "AttributeName": "userId",
                "KeyType": "HASH"
              }],
              "Projection": {
                "ProjectionType": "KEYS_ONLY"
              },
              "ProvisionedThroughput": {
                "ReadCapacityUnits": 1,
                "WriteCapacityUnits": 1
              }
            },
            {
              "Ref": "AWS::NoValue"
            }
          ]
        }],
        "TimeToLiveSpecification": {
          "AttributeName": "ttl",
          "Enabled": true
        }
      }
    },
    "Lambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Join": [
              "",
              [
                "honesty-store-lambdas-",
                { "Ref": "AWS::Region" }
              ]
            ]
          },
          "S3Key": { "Ref": "LambdaS3Key" }
        },
        "FunctionName": {
          "Fn::Join": [
            "",
            [
              { "Ref": "ServicePrefix" },
              "-",
              { "Ref": "ServiceName" }
            ]
          ]
        },
        "Timeout": {
          "Ref": "LambdaTimeout"
        },
        "Role": {
          "Fn::Join": [
            "",
            [
              "arn:aws:iam::812374064424:role/",
              { "Ref": "HSPrefix" },
              "-lambda-dynamo-rw"
            ]
          ]
        },
        "Handler": {
          "Ref": "LambdaHandler"
        },
        "Environment": {
          "Variables": {
            "BASE_URL": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  { "Ref": "HSDomainName" }
                ]
              ]
            },
            "LAMBDA_BASE_URL": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  { "Ref": "HSDomainName" }
                ]
              ]
            },
            "SERVICE_TOKEN_SECRET": {
              "Ref": "ServiceSecret"
            },
            "LIVE_STRIPE_KEY": { "Ref": "StripeKeyLive" },
            "TEST_STRIPE_KEY": { "Ref": "StripeKeyTest" },
            "SLACK_CHANNEL_PREFIX": "",
            "USER_TOKEN_SECRET": { "Ref": "UserSecret" },
            "TABLE_NAME": {
              "Fn::If": [
                "WithTable",
                {
                  "Fn::Join": [
                    "",
                    [
                      { "Ref": "ServicePrefix" },
                      "-",
                      { "Ref": "ServiceName" }
                    ]
                  ]
                },
                { "Ref": "AWS::NoValue" }
              ]
            }
          }
        },
        "Runtime": "nodejs6.10",
        "TracingConfig": {
          "Mode": "Active"
        }
      }
    },
    "LambdaApiGateway": {
      "Condition": "WithApiGateway",
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::Join": [
            "",
            [
              { "Ref": "ServicePrefix" },
              "-",
              { "Ref": "ServiceName" }
            ]
          ]
        },
        "Principal": "apigateway.amazonaws.com"
      },
      "DependsOn": [
        "Lambda"
      ]
    }
  }
}

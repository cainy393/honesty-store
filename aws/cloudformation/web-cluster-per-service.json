{
  "Parameters": {
    "ServiceName": {
      "Type": "String",
      "Description": "the name of the service, e.g. item, store, etc"
    },
    "ServiceSecret": {
      "Type": "String",
      "Description": "Secret for inter-service authentication"
    },

    "IndexUserId": {
      "Type": "String",
      "Description": "whether to add a 'userId' to the table keyschema",
      "AllowedValues": ["Yes", "No"]
    },
    "ReadCapacityUnits": {
      "Type": "String",
      "Description": "table capacity - read"
    },
    "WriteCapacityUnits": {
      "Type": "String",
      "Description": "table capacity - write"
    },

    "LambdaCode": {
      "Type": "String",
      "Description": "something about the lambda code - maybe a zip ref?"
    },
    "LambdaTimeout": {
      "Type": "String"
    },
    "LambdaHandler": {
      "Type": "String",
      "Description": "Handler for the lambda, e.g. 'server/lambda.handler', 'lib/bundle-min.handler'"
    },

    "WithTable": {
      "Type": "String",
      "Description": "Boolean describing whether a table should be created",
      "AllowedValues": ["Yes", "No"]
    },
    "UserSecret": {
      "Type": "String",
      "Description": "The user secret (or empty) for this service"
    },
    "StripeKeyLive": {
      "Type": "String",
      "Description": "Stripe live secret"
    },
    "StripeKeyTest": {
      "Type": "String",
      "Description": "Stripe test secret"
    },
    "WithApiGateway": {
      "Type": "String",
      "Description": "Boolean describing whether the lambda is exposed on ApiGateway",
      "AllowedValues": ["Yes", "No"]
    },
    "ApiGatewayCatchAll": {
      "Type": "String",
      "Description": "Boolean describing whether the ApiGateway is a catch-all resource",
      "AllowedValues": ["Yes", "No"]
    },
    "HonestyStorePrefix": {
      "Type": "String",
      "Description": "Prefix for all service-based names, e.g. \"honesty-store\", \"hs-<branch>\""
    }

  },
  "Resources": {
    "Table": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "TableName": {
          "Fn::Join": [
            "",
            [
              { "Ref": "HonestyStorePrefix" },
              "-"
              { "Ref": "ServiceName" }
            ]
          ]
        },
        "KeySchema": [ { "AttributeName": "id", "KeyType": "HASH" } ],
        "AttributeDefinitions": [
          { "AttributeName": "id", "AttributeType": "S" },
          {
            "Fn::If": [
              { "Fn::Equals": [ {"Ref": "Index-userId"}, "Yes" ] },
              {
                "AttributeName": "userId",
                "AttributeType": "S"
              },
              { "Ref": "AWS::NoValue" }
            ]
          }
        ],
        "ProvisionedThroughput": {
          "ReadCapacityUnits": {
            "Ref": "ReadCapacityUnits"
          },
          "WriteCapacityUnits": {
            "Ref": "WriteCapacityUnits"
          }
        },
        "GlobalSecondaryIndexes": [{
          "Fn::If": [
            { "Fn::Equals": [ {"Ref": "Index-userId"}, "Yes" ] },
            {
              "IndexName": "userId",
              "KeySchema": [{
                "AttributeName": "userId",
                "KeyType": "HASH"
              }],
              "Projection": {
                "ProjectionType": "KEYS_ONLY"
              },
              "ProvisionedThroughput": {
                "ReadCapacityUnits": 1,
                "WriteCapacityUnits": 1
              }
            },
            {
              "Ref": "AWS::NoValue"
            }
          ]
        }]
      }
    },
    "Lambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "Ref": "LambdaCode"
        },
        "FunctionName": {
          "Fn::Join": [
            "",
            [
              { "Ref": "HonestyStorePrefix" },
              "-",
              { "Ref": "ServiceName" }
            ]
          ]
        },
        "Timeout": {
          "Ref": "LambdaTimeout"
        },
        "Role": {
          "Fn::Join": [
            "",
            [
              "arn:aws:iam::812374064424:role/",
              { "Ref": "HonestyStorePrefix" },
              "-lambda-dynamo-rw"
            ]
          ]
        },
        "Handler": {
          "Ref": "LambdaHandler"
        },
        "Environment": {
          "Variables": {
            "BASE_URL": "https://live.honesty.store",
            "LAMBDA_BASE_URL": "https://live.honesty.store",
            "SERVICE_TOKEN_SECRET": {
              "Ref": "ServiceSecret"
            },
            "LIVE_STRIPE_KEY": { "Ref": "StripeKeyLive" },
            "TEST_STRIPE_KEY": { "Ref": "StripeKeyTest" },
            "SLACK_CHANNEL_PREFIX": "",
            "USER_TOKEN_SECRET": { "Ref": "UserSecret" },
            {
              "Fn::If": [
                { "Fn::Equals": [ {"Ref": "WithTable"}, "Yes" ] },
                {
                  "TABLE_NAME": {
                    "Fn::Join": [
                      "",
                      [
                        { "Ref": "HonestyStorePrefix" },
                        "-",
                        { "Ref": "ServiceName" }
                      ]
                    ]
                  }
                },
                { "Ref": "AWS::NoValue" }
              ]
            }
          }
        },
        "Runtime": "nodejs6.10",
        "TracingConfig": {
          "Mode": "Active"
        }
      }
    },
    {
      "Fn::If": [
        { "Fn::Equals": [ {"Ref": "WithApiGateway"}, "Yes" ] },
        {
          "LambdaApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "Action": "lambda:InvokeFunction",
              "FunctionName": {
                "Fn::Join": [
                  "",
                  [
                    { "Ref": "HonestyStorePrefix" },
                    "-",
                    { "Ref": "ServiceName" }
                  ]
                ]
              },
              "Principal": "apigateway.amazonaws.com"
            }
          }
        },
        { "Ref": "AWS::NoValue" }
      ]
    },
    {
      "Fn::If": [
        { "Fn::Equals": [ {"Ref": "ApiGatewayCatchAll"}, "Yes" ] },
        {
          "ApiGatewayCatchAll": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "RestApiId": {
                "Ref": "RestApi"
              },
              "ParentId": "/",
              "PathPart": "{proxy+}"
            }
          },
          "ApiGatewayMethod": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "RestApiId": {
                "Ref": "RestApi"
              },
              "ResourceId": {
                "Ref": "ApiGateway-catchall"
              },
              "HttpMethod": "ANY",
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Ref": "Lambda"
                      },
                      "/invocations"
                    ]
                  ]
                },
                "Credentials": null
              }
            }
          }
        },
        {
          "ApiGatewayParent": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "RestApiId": {
                "Ref": "RestApi"
              },
              "ParentId": "/",
              "PathPart": {
                "Ref": "ServiceName"
              }
            }
          },
          "ApiGatewayNested": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "RestApiId": {
                "Ref": "RestApi"
              },
              "ParentId": {
                "Ref": "ApiGateway-parent"
              },
              "PathPart": "{proxy+}"
            }
          },
          "ApiGatewayMethod": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "RestApiId": {
                "Ref": "RestApi"
              },
              "ResourceId": {
                "Ref": "ApiGateway-nested"
              },
              "HttpMethod": "ANY",
              "AuthorizationType": "NONE",
              "Integration": {
                {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:aws:apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Ref": "Lambda"
                        },
                        "/invocations"
                      ]
                    ]
                  },
                  "Credentials": null
                }
              }
            }
          }
        }
      ]
    }
  }
}

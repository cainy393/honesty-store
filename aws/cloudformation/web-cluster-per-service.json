{
  "Parameters": {
    "ServiceName": {
      "Type": "String",
      "Description": "the name of the service, e.g. item, store, etc"
    },
    "ServiceSecret": {
      "Type": "String",
      "Description": "Secret for inter-service authentication"
    },

    "IndexUserId": {
      "Type": "String",
      "Description": "whether to add a 'userId' to the table keyschema",
      "AllowedValues": ["Yes", "No"]
    },
    "ReadCapacityUnits": {
      "Type": "String",
      "Description": "table capacity - read"
    },
    "WriteCapacityUnits": {
      "Type": "String",
      "Description": "table capacity - write"
    },

    "LambdaS3Key": {
      "Type": "String",
      "Description": "something about the lambda code - maybe a zip ref?"
    },
    "LambdaTimeout": {
      "Type": "String"
    },
    "LambdaHandler": {
      "Type": "String",
      "Description": "Handler for the lambda, e.g. 'server/lambda.handler', 'lib/bundle-min.handler'"
    },

    "WithTable": {
      "Type": "String",
      "Description": "Boolean describing whether a table should be created",
      "AllowedValues": ["Yes", "No"]
    },
    "UserSecret": {
      "Type": "String",
      "Description": "The user secret (or empty) for this service"
    },
    "StripeKeyLive": {
      "Type": "String",
      "Description": "Stripe live secret"
    },
    "StripeKeyTest": {
      "Type": "String",
      "Description": "Stripe test secret"
    },
    "WithApiGateway": {
      "Type": "String",
      "Description": "Boolean describing whether the lambda is exposed on ApiGateway",
      "AllowedValues": ["Yes", "No"]
    },
    "ApiGatewayCatchAll": {
      "Type": "String",
      "Description": "Boolean describing whether the ApiGateway is a catch-all resource",
      "AllowedValues": ["Yes", "No"]
    },
    "HSPrefix": {
      "Type": "String",
      "Description": "Prefix for all shared names, e.g. \"honesty-store\", \"hs\""
    },
    "ServicePrefix": {
      "Type": "String",
      "Description": "Prefix for all service-based names, e.g. \"honesty-store\", \"hs-<branch>\""
    },
    "RestApi": {
      "Type": "String",
      "Description": "The RestApi to which this service should be attached"
    }
  },

  "Conditions": {
    "ApiGatewayCatchAll": {
      "Fn::Equals": [ { "Ref": "ApiGatewayCatchAll" }, "Yes" ]
    },
    "ApiGatewayServiceOnly": {
      "Fn::And": [
        "Fn::Not": [{
          "Fn::Equals": [ { "Ref": "ApiGatewayCatchAll" }, "Yes" ]
        }],
        "Fn::Equals": [ { "Ref": "WithApiGateway" }, "Yes" ]
      ]
    },
    "WithApiGateway": {
      "Fn::Equals": [ { "Ref": "WithApiGateway" }, "Yes" ]
    },
    "IndexUserId": {
      "Fn::Equals": [ {"Ref": "IndexUserId"}, "Yes" ]
    },
    "WithTable": {
      "Fn::Equals": [ {"Ref": "WithTable"}, "Yes" ]
    }
  },

  "Resources": {
    "Table": {
      "Condition": "WithTable",
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "TableName": {
          "Fn::Join": [
            "",
            [
              { "Ref": "ServicePrefix" },
              "-",
              { "Ref": "ServiceName" }
            ]
          ]
        },
        "KeySchema": [ { "AttributeName": "id", "KeyType": "HASH" } ],
        "AttributeDefinitions": [
          { "AttributeName": "id", "AttributeType": "S" },
          {
            "Fn::If": [
              "IndexUserId",
              {
                "AttributeName": "userId",
                "AttributeType": "S"
              },
              { "Ref": "AWS::NoValue" }
            ]
          }
        ],
        "ProvisionedThroughput": {
          "ReadCapacityUnits": {
            "Ref": "ReadCapacityUnits"
          },
          "WriteCapacityUnits": {
            "Ref": "WriteCapacityUnits"
          }
        },
        "GlobalSecondaryIndexes": [{
          "Fn::If": [
            "IndexUserId",
            {
              "IndexName": "userId",
              "KeySchema": [{
                "AttributeName": "userId",
                "KeyType": "HASH"
              }],
              "Projection": {
                "ProjectionType": "KEYS_ONLY"
              },
              "ProvisionedThroughput": {
                "ReadCapacityUnits": 1,
                "WriteCapacityUnits": 1
              }
            },
            {
              "Ref": "AWS::NoValue"
            }
          ]
        }],
        "TimeToLiveSpecification": {
          "AttributeName": "ttl",
          "Enabled": true
        }
      }
    },
    "Lambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "honesty-store-lambdas",
          "S3Key": { "Ref": "LambdaS3Key" }
        },
        "FunctionName": {
          "Fn::Join": [
            "",
            [
              { "Ref": "ServicePrefix" },
              "-",
              { "Ref": "ServiceName" }
            ]
          ]
        },
        "Timeout": {
          "Ref": "LambdaTimeout"
        },
        "Role": {
          "Fn::Join": [
            "",
            [
              "arn:aws:iam::812374064424:role/",
              { "Ref": "HSPrefix" },
              "-lambda-dynamo-rw"
            ]
          ]
        },
        "Handler": {
          "Ref": "LambdaHandler"
        },
        "Environment": {
          "Variables": {
            "BASE_URL": "https://live.honesty.store",
            "LAMBDA_BASE_URL": "https://live.honesty.store",
            "SERVICE_TOKEN_SECRET": {
              "Ref": "ServiceSecret"
            },
            "LIVE_STRIPE_KEY": { "Ref": "StripeKeyLive" },
            "TEST_STRIPE_KEY": { "Ref": "StripeKeyTest" },
            "SLACK_CHANNEL_PREFIX": "",
            "USER_TOKEN_SECRET": { "Ref": "UserSecret" },
            "TABLE_NAME": {
              "Fn::If": [
                "WithTable",
                {
                  "Fn::Join": [
                    "",
                    [
                      { "Ref": "ServicePrefix" },
                      "-",
                      { "Ref": "ServiceName" }
                    ]
                  ]
                },
                { "Ref": "AWS::NoValue" }
              ]
            }
          }
        },
        "Runtime": "nodejs6.10",
        "TracingConfig": {
          "Mode": "Active"
        }
      }
    },
    "LambdaApiGateway": {
      "Condition": "WithApiGateway",
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::Join": [
            "",
            [
              { "Ref": "ServicePrefix" },
              "-",
              { "Ref": "ServiceName" }
            ]
          ]
        },
        "Principal": "apigateway.amazonaws.com"
      }
    },

    "ApiGatewayEndpointCatchAll": {
      "Condition": "ApiGatewayCatchAll",
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "RestApiId": {
          "Ref": "RestApi"
        },
        "ParentId": "/",
        "PathPart": "{proxy+}"
      }
    },
    "ApiGatewayEndpointServiceOnly": {
      "Condition": "ApiGatewayServiceOnly",
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "RestApiId": {
          "Ref": "RestApi"
        },
        "ParentId": {
          "Ref": "ApiGatewayRoot"
        },
        "PathPart": "{proxy+}"
      }
    },
    "ApiGatewayIntegration": {
      "Condition": "WithApiGateway",
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "RestApiId": {
          "Ref": "RestApi"
        },
        "ResourceId": {
          "Fn::If": [
            "ApiGatewayCatchAll",
            { "Ref": "ApiGatewayEndpointCatchAll" },
            { "Ref": "ApiGatewayEndpointServiceOnly" }
          ]
        },
        "HttpMethod": "ANY",
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                { "Ref": "AWS::Region" },
                ":lambda:path/2015-03-31/functions/",
                { "Ref": "Lambda" },
                "/invocations"
              ]
            ]
          }
        }
      }
    },
    "ApiGatewayRoot": {
      "Condition": "WithApiGateway",
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "RestApiId": {
          "Ref": "RestApi"
        },
        "ParentId": "/",
        "PathPart": {
          "Ref": "ServiceName"
        }
      }
    }
  }
}
